name: Build, Push, and Deploy

on:
  push:
    branches:
      - main # Se activa al hacer push a la rama "main"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Ejecuta el pipeline en un runner de GitHub

    steps:
      # Paso 1: Obtener el cÃ³digo del repositorio
      - name: Checkout code
        uses: actions/checkout@v4

      # Paso 2: Configurar credenciales de AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Paso 3: Login en Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Paso 4: Construir la imagen Docker
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY_URL }}:latest .

      # Paso 5: Subir la imagen al repositorio ECR
      - name: Push Docker image
        run: |
          docker tag ${{ secrets.ECR_REPOSITORY_URL }}:latest ${{ secrets.ECR_REPOSITORY_URL }}:latest
          docker push ${{ secrets.ECR_REPOSITORY_URL }}:latest

      # Paso 6: Desplegar en EC2 via SSH
      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }} # Clave privada en base64
        run: |
          # Decodificar la clave SSH y configurar permisos
          echo "$SSH_PRIVATE_KEY" > key.pem
          chmod 400 key.pem

          # Conectar a la instancia y ejecutar comandos
          ssh -i key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} "
            # Configurar permisos de Docker
            sudo usermod -aG docker ec2-user
            newgrp docker  # Recargar grupos del usuario
            
            # Autenticarse en ECR desde la instancia
            aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URL }}

            # Detener y eliminar contenedores (manejo seguro)
            CONTAINERS=\$(sudo docker ps -q)
            if [ ! -z \"\$CONTAINERS\" ]; then
              sudo docker stop \$CONTAINERS
              sudo docker rm \$CONTAINERS
            fi

            # Descargar y ejecutar la imagen
            sudo docker pull ${{ secrets.ECR_REPOSITORY_URL }}:latest
            sudo docker run -d -p 3000:3000 ${{ secrets.ECR_REPOSITORY_URL }}:latest
          "
